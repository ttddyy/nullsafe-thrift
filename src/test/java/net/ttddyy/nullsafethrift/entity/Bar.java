/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package net.ttddyy.nullsafethrift.entity;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Bar implements org.apache.thrift.TBase<Bar, Bar._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Bar");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField BAR_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("barList", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField BAR_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("barSet", org.apache.thrift.protocol.TType.SET, (short)3);
  private static final org.apache.thrift.protocol.TField BAR_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("barMap", org.apache.thrift.protocol.TType.MAP, (short)4);
  private static final org.apache.thrift.protocol.TField BAZ_FIELD_DESC = new org.apache.thrift.protocol.TField("baz", org.apache.thrift.protocol.TType.STRUCT, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BarStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BarTupleSchemeFactory());
  }

  public String name; // optional
  public List<String> barList; // optional
  public Set<String> barSet; // optional
  public Map<String,String> barMap; // optional
  public Baz baz; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "name"),
    BAR_LIST((short)2, "barList"),
    BAR_SET((short)3, "barSet"),
    BAR_MAP((short)4, "barMap"),
    BAZ((short)5, "baz");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // BAR_LIST
          return BAR_LIST;
        case 3: // BAR_SET
          return BAR_SET;
        case 4: // BAR_MAP
          return BAR_MAP;
        case 5: // BAZ
          return BAZ;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.NAME,_Fields.BAR_LIST,_Fields.BAR_SET,_Fields.BAR_MAP,_Fields.BAZ};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BAR_LIST, new org.apache.thrift.meta_data.FieldMetaData("barList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.BAR_SET, new org.apache.thrift.meta_data.FieldMetaData("barSet", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.BAR_MAP, new org.apache.thrift.meta_data.FieldMetaData("barMap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.BAZ, new org.apache.thrift.meta_data.FieldMetaData("baz", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Baz.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Bar.class, metaDataMap);
  }

  public Bar() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Bar(Bar other) {
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetBarList()) {
      List<String> __this__barList = new ArrayList<String>();
      for (String other_element : other.barList) {
        __this__barList.add(other_element);
      }
      this.barList = __this__barList;
    }
    if (other.isSetBarSet()) {
      Set<String> __this__barSet = new HashSet<String>();
      for (String other_element : other.barSet) {
        __this__barSet.add(other_element);
      }
      this.barSet = __this__barSet;
    }
    if (other.isSetBarMap()) {
      Map<String,String> __this__barMap = new HashMap<String,String>();
      for (Map.Entry<String, String> other_element : other.barMap.entrySet()) {

        String other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        String __this__barMap_copy_key = other_element_key;

        String __this__barMap_copy_value = other_element_value;

        __this__barMap.put(__this__barMap_copy_key, __this__barMap_copy_value);
      }
      this.barMap = __this__barMap;
    }
    if (other.isSetBaz()) {
      this.baz = new Baz(other.baz);
    }
  }

  public Bar deepCopy() {
    return new Bar(this);
  }

  @Override
  public void clear() {
    this.name = null;
    this.barList = null;
    this.barSet = null;
    this.barMap = null;
    this.baz = null;
  }

  public String getName() {
    return this.name;
  }

  public Bar setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getBarListSize() {
    return (this.barList == null) ? 0 : this.barList.size();
  }

  public java.util.Iterator<String> getBarListIterator() {
    return (this.barList == null) ? null : this.barList.iterator();
  }

  public void addToBarList(String elem) {
    if (this.barList == null) {
      this.barList = new ArrayList<String>();
    }
    this.barList.add(elem);
  }

  public List<String> getBarList() {
    return this.barList;
  }

  public Bar setBarList(List<String> barList) {
    this.barList = barList;
    return this;
  }

  public void unsetBarList() {
    this.barList = null;
  }

  /** Returns true if field barList is set (has been assigned a value) and false otherwise */
  public boolean isSetBarList() {
    return this.barList != null;
  }

  public void setBarListIsSet(boolean value) {
    if (!value) {
      this.barList = null;
    }
  }

  public int getBarSetSize() {
    return (this.barSet == null) ? 0 : this.barSet.size();
  }

  public java.util.Iterator<String> getBarSetIterator() {
    return (this.barSet == null) ? null : this.barSet.iterator();
  }

  public void addToBarSet(String elem) {
    if (this.barSet == null) {
      this.barSet = new HashSet<String>();
    }
    this.barSet.add(elem);
  }

  public Set<String> getBarSet() {
    return this.barSet;
  }

  public Bar setBarSet(Set<String> barSet) {
    this.barSet = barSet;
    return this;
  }

  public void unsetBarSet() {
    this.barSet = null;
  }

  /** Returns true if field barSet is set (has been assigned a value) and false otherwise */
  public boolean isSetBarSet() {
    return this.barSet != null;
  }

  public void setBarSetIsSet(boolean value) {
    if (!value) {
      this.barSet = null;
    }
  }

  public int getBarMapSize() {
    return (this.barMap == null) ? 0 : this.barMap.size();
  }

  public void putToBarMap(String key, String val) {
    if (this.barMap == null) {
      this.barMap = new HashMap<String,String>();
    }
    this.barMap.put(key, val);
  }

  public Map<String,String> getBarMap() {
    return this.barMap;
  }

  public Bar setBarMap(Map<String,String> barMap) {
    this.barMap = barMap;
    return this;
  }

  public void unsetBarMap() {
    this.barMap = null;
  }

  /** Returns true if field barMap is set (has been assigned a value) and false otherwise */
  public boolean isSetBarMap() {
    return this.barMap != null;
  }

  public void setBarMapIsSet(boolean value) {
    if (!value) {
      this.barMap = null;
    }
  }

  public Baz getBaz() {
    return this.baz;
  }

  public Bar setBaz(Baz baz) {
    this.baz = baz;
    return this;
  }

  public void unsetBaz() {
    this.baz = null;
  }

  /** Returns true if field baz is set (has been assigned a value) and false otherwise */
  public boolean isSetBaz() {
    return this.baz != null;
  }

  public void setBazIsSet(boolean value) {
    if (!value) {
      this.baz = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case BAR_LIST:
      if (value == null) {
        unsetBarList();
      } else {
        setBarList((List<String>)value);
      }
      break;

    case BAR_SET:
      if (value == null) {
        unsetBarSet();
      } else {
        setBarSet((Set<String>)value);
      }
      break;

    case BAR_MAP:
      if (value == null) {
        unsetBarMap();
      } else {
        setBarMap((Map<String,String>)value);
      }
      break;

    case BAZ:
      if (value == null) {
        unsetBaz();
      } else {
        setBaz((Baz)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case BAR_LIST:
      return getBarList();

    case BAR_SET:
      return getBarSet();

    case BAR_MAP:
      return getBarMap();

    case BAZ:
      return getBaz();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case BAR_LIST:
      return isSetBarList();
    case BAR_SET:
      return isSetBarSet();
    case BAR_MAP:
      return isSetBarMap();
    case BAZ:
      return isSetBaz();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Bar)
      return this.equals((Bar)that);
    return false;
  }

  public boolean equals(Bar that) {
    if (that == null)
      return false;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_barList = true && this.isSetBarList();
    boolean that_present_barList = true && that.isSetBarList();
    if (this_present_barList || that_present_barList) {
      if (!(this_present_barList && that_present_barList))
        return false;
      if (!this.barList.equals(that.barList))
        return false;
    }

    boolean this_present_barSet = true && this.isSetBarSet();
    boolean that_present_barSet = true && that.isSetBarSet();
    if (this_present_barSet || that_present_barSet) {
      if (!(this_present_barSet && that_present_barSet))
        return false;
      if (!this.barSet.equals(that.barSet))
        return false;
    }

    boolean this_present_barMap = true && this.isSetBarMap();
    boolean that_present_barMap = true && that.isSetBarMap();
    if (this_present_barMap || that_present_barMap) {
      if (!(this_present_barMap && that_present_barMap))
        return false;
      if (!this.barMap.equals(that.barMap))
        return false;
    }

    boolean this_present_baz = true && this.isSetBaz();
    boolean that_present_baz = true && that.isSetBaz();
    if (this_present_baz || that_present_baz) {
      if (!(this_present_baz && that_present_baz))
        return false;
      if (!this.baz.equals(that.baz))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Bar other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Bar typedOther = (Bar)other;

    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBarList()).compareTo(typedOther.isSetBarList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBarList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.barList, typedOther.barList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBarSet()).compareTo(typedOther.isSetBarSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBarSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.barSet, typedOther.barSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBarMap()).compareTo(typedOther.isSetBarMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBarMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.barMap, typedOther.barMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBaz()).compareTo(typedOther.isSetBaz());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBaz()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.baz, typedOther.baz);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Bar(");
    boolean first = true;

    if (isSetName()) {
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetBarList()) {
      if (!first) sb.append(", ");
      sb.append("barList:");
      if (this.barList == null) {
        sb.append("null");
      } else {
        sb.append(this.barList);
      }
      first = false;
    }
    if (isSetBarSet()) {
      if (!first) sb.append(", ");
      sb.append("barSet:");
      if (this.barSet == null) {
        sb.append("null");
      } else {
        sb.append(this.barSet);
      }
      first = false;
    }
    if (isSetBarMap()) {
      if (!first) sb.append(", ");
      sb.append("barMap:");
      if (this.barMap == null) {
        sb.append("null");
      } else {
        sb.append(this.barMap);
      }
      first = false;
    }
    if (isSetBaz()) {
      if (!first) sb.append(", ");
      sb.append("baz:");
      if (this.baz == null) {
        sb.append("null");
      } else {
        sb.append(this.baz);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (baz != null) {
      baz.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BarStandardSchemeFactory implements SchemeFactory {
    public BarStandardScheme getScheme() {
      return new BarStandardScheme();
    }
  }

  private static class BarStandardScheme extends StandardScheme<Bar> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Bar struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BAR_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list26 = iprot.readListBegin();
                struct.barList = new ArrayList<String>(_list26.size);
                for (int _i27 = 0; _i27 < _list26.size; ++_i27)
                {
                  String _elem28; // optional
                  _elem28 = iprot.readString();
                  struct.barList.add(_elem28);
                }
                iprot.readListEnd();
              }
              struct.setBarListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BAR_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set29 = iprot.readSetBegin();
                struct.barSet = new HashSet<String>(2*_set29.size);
                for (int _i30 = 0; _i30 < _set29.size; ++_i30)
                {
                  String _elem31; // optional
                  _elem31 = iprot.readString();
                  struct.barSet.add(_elem31);
                }
                iprot.readSetEnd();
              }
              struct.setBarSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BAR_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map32 = iprot.readMapBegin();
                struct.barMap = new HashMap<String,String>(2*_map32.size);
                for (int _i33 = 0; _i33 < _map32.size; ++_i33)
                {
                  String _key34; // required
                  String _val35; // required
                  _key34 = iprot.readString();
                  _val35 = iprot.readString();
                  struct.barMap.put(_key34, _val35);
                }
                iprot.readMapEnd();
              }
              struct.setBarMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BAZ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.baz = new Baz();
              struct.baz.read(iprot);
              struct.setBazIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Bar struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.barList != null) {
        if (struct.isSetBarList()) {
          oprot.writeFieldBegin(BAR_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.barList.size()));
            for (String _iter36 : struct.barList)
            {
              oprot.writeString(_iter36);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.barSet != null) {
        if (struct.isSetBarSet()) {
          oprot.writeFieldBegin(BAR_SET_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.barSet.size()));
            for (String _iter37 : struct.barSet)
            {
              oprot.writeString(_iter37);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.barMap != null) {
        if (struct.isSetBarMap()) {
          oprot.writeFieldBegin(BAR_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.barMap.size()));
            for (Map.Entry<String, String> _iter38 : struct.barMap.entrySet())
            {
              oprot.writeString(_iter38.getKey());
              oprot.writeString(_iter38.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.baz != null) {
        if (struct.isSetBaz()) {
          oprot.writeFieldBegin(BAZ_FIELD_DESC);
          struct.baz.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BarTupleSchemeFactory implements SchemeFactory {
    public BarTupleScheme getScheme() {
      return new BarTupleScheme();
    }
  }

  private static class BarTupleScheme extends TupleScheme<Bar> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Bar struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetName()) {
        optionals.set(0);
      }
      if (struct.isSetBarList()) {
        optionals.set(1);
      }
      if (struct.isSetBarSet()) {
        optionals.set(2);
      }
      if (struct.isSetBarMap()) {
        optionals.set(3);
      }
      if (struct.isSetBaz()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetBarList()) {
        {
          oprot.writeI32(struct.barList.size());
          for (String _iter39 : struct.barList)
          {
            oprot.writeString(_iter39);
          }
        }
      }
      if (struct.isSetBarSet()) {
        {
          oprot.writeI32(struct.barSet.size());
          for (String _iter40 : struct.barSet)
          {
            oprot.writeString(_iter40);
          }
        }
      }
      if (struct.isSetBarMap()) {
        {
          oprot.writeI32(struct.barMap.size());
          for (Map.Entry<String, String> _iter41 : struct.barMap.entrySet())
          {
            oprot.writeString(_iter41.getKey());
            oprot.writeString(_iter41.getValue());
          }
        }
      }
      if (struct.isSetBaz()) {
        struct.baz.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Bar struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list42 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.barList = new ArrayList<String>(_list42.size);
          for (int _i43 = 0; _i43 < _list42.size; ++_i43)
          {
            String _elem44; // optional
            _elem44 = iprot.readString();
            struct.barList.add(_elem44);
          }
        }
        struct.setBarListIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TSet _set45 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.barSet = new HashSet<String>(2*_set45.size);
          for (int _i46 = 0; _i46 < _set45.size; ++_i46)
          {
            String _elem47; // optional
            _elem47 = iprot.readString();
            struct.barSet.add(_elem47);
          }
        }
        struct.setBarSetIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TMap _map48 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.barMap = new HashMap<String,String>(2*_map48.size);
          for (int _i49 = 0; _i49 < _map48.size; ++_i49)
          {
            String _key50; // required
            String _val51; // required
            _key50 = iprot.readString();
            _val51 = iprot.readString();
            struct.barMap.put(_key50, _val51);
          }
        }
        struct.setBarMapIsSet(true);
      }
      if (incoming.get(4)) {
        struct.baz = new Baz();
        struct.baz.read(iprot);
        struct.setBazIsSet(true);
      }
    }
  }

}

