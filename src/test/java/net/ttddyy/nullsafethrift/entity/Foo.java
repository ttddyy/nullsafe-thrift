/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package net.ttddyy.nullsafethrift.entity;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Foo implements org.apache.thrift.TBase<Foo, Foo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Foo");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField REQUIRED_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("requiredList", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField REQUIRED_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("requiredSet", org.apache.thrift.protocol.TType.SET, (short)3);
  private static final org.apache.thrift.protocol.TField REQUIRED_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("requiredMap", org.apache.thrift.protocol.TType.MAP, (short)4);
  private static final org.apache.thrift.protocol.TField OPTIONAL_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("optionalList", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField OPTIONAL_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("optionalSet", org.apache.thrift.protocol.TType.SET, (short)6);
  private static final org.apache.thrift.protocol.TField OPTIONAL_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("optionalMap", org.apache.thrift.protocol.TType.MAP, (short)7);
  private static final org.apache.thrift.protocol.TField BAR_FIELD_DESC = new org.apache.thrift.protocol.TField("bar", org.apache.thrift.protocol.TType.STRUCT, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FooStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FooTupleSchemeFactory());
  }

  public String name; // required
  public List<String> requiredList; // required
  public Set<String> requiredSet; // required
  public Map<String,String> requiredMap; // required
  public List<String> optionalList; // optional
  public Set<String> optionalSet; // optional
  public Map<String,String> optionalMap; // optional
  public Bar bar; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "name"),
    REQUIRED_LIST((short)2, "requiredList"),
    REQUIRED_SET((short)3, "requiredSet"),
    REQUIRED_MAP((short)4, "requiredMap"),
    OPTIONAL_LIST((short)5, "optionalList"),
    OPTIONAL_SET((short)6, "optionalSet"),
    OPTIONAL_MAP((short)7, "optionalMap"),
    BAR((short)8, "bar");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // REQUIRED_LIST
          return REQUIRED_LIST;
        case 3: // REQUIRED_SET
          return REQUIRED_SET;
        case 4: // REQUIRED_MAP
          return REQUIRED_MAP;
        case 5: // OPTIONAL_LIST
          return OPTIONAL_LIST;
        case 6: // OPTIONAL_SET
          return OPTIONAL_SET;
        case 7: // OPTIONAL_MAP
          return OPTIONAL_MAP;
        case 8: // BAR
          return BAR;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.OPTIONAL_LIST,_Fields.OPTIONAL_SET,_Fields.OPTIONAL_MAP,_Fields.BAR};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REQUIRED_LIST, new org.apache.thrift.meta_data.FieldMetaData("requiredList", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.REQUIRED_SET, new org.apache.thrift.meta_data.FieldMetaData("requiredSet", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.REQUIRED_MAP, new org.apache.thrift.meta_data.FieldMetaData("requiredMap", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.OPTIONAL_LIST, new org.apache.thrift.meta_data.FieldMetaData("optionalList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.OPTIONAL_SET, new org.apache.thrift.meta_data.FieldMetaData("optionalSet", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.OPTIONAL_MAP, new org.apache.thrift.meta_data.FieldMetaData("optionalMap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.BAR, new org.apache.thrift.meta_data.FieldMetaData("bar", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Bar.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Foo.class, metaDataMap);
  }

  public Foo() {
  }

  public Foo(
    String name,
    List<String> requiredList,
    Set<String> requiredSet,
    Map<String,String> requiredMap)
  {
    this();
    this.name = name;
    this.requiredList = requiredList;
    this.requiredSet = requiredSet;
    this.requiredMap = requiredMap;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Foo(Foo other) {
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetRequiredList()) {
      List<String> __this__requiredList = new ArrayList<String>();
      for (String other_element : other.requiredList) {
        __this__requiredList.add(other_element);
      }
      this.requiredList = __this__requiredList;
    }
    if (other.isSetRequiredSet()) {
      Set<String> __this__requiredSet = new HashSet<String>();
      for (String other_element : other.requiredSet) {
        __this__requiredSet.add(other_element);
      }
      this.requiredSet = __this__requiredSet;
    }
    if (other.isSetRequiredMap()) {
      Map<String,String> __this__requiredMap = new HashMap<String,String>();
      for (Map.Entry<String, String> other_element : other.requiredMap.entrySet()) {

        String other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        String __this__requiredMap_copy_key = other_element_key;

        String __this__requiredMap_copy_value = other_element_value;

        __this__requiredMap.put(__this__requiredMap_copy_key, __this__requiredMap_copy_value);
      }
      this.requiredMap = __this__requiredMap;
    }
    if (other.isSetOptionalList()) {
      List<String> __this__optionalList = new ArrayList<String>();
      for (String other_element : other.optionalList) {
        __this__optionalList.add(other_element);
      }
      this.optionalList = __this__optionalList;
    }
    if (other.isSetOptionalSet()) {
      Set<String> __this__optionalSet = new HashSet<String>();
      for (String other_element : other.optionalSet) {
        __this__optionalSet.add(other_element);
      }
      this.optionalSet = __this__optionalSet;
    }
    if (other.isSetOptionalMap()) {
      Map<String,String> __this__optionalMap = new HashMap<String,String>();
      for (Map.Entry<String, String> other_element : other.optionalMap.entrySet()) {

        String other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        String __this__optionalMap_copy_key = other_element_key;

        String __this__optionalMap_copy_value = other_element_value;

        __this__optionalMap.put(__this__optionalMap_copy_key, __this__optionalMap_copy_value);
      }
      this.optionalMap = __this__optionalMap;
    }
    if (other.isSetBar()) {
      this.bar = new Bar(other.bar);
    }
  }

  public Foo deepCopy() {
    return new Foo(this);
  }

  @Override
  public void clear() {
    this.name = null;
    this.requiredList = null;
    this.requiredSet = null;
    this.requiredMap = null;
    this.optionalList = null;
    this.optionalSet = null;
    this.optionalMap = null;
    this.bar = null;
  }

  public String getName() {
    return this.name;
  }

  public Foo setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getRequiredListSize() {
    return (this.requiredList == null) ? 0 : this.requiredList.size();
  }

  public java.util.Iterator<String> getRequiredListIterator() {
    return (this.requiredList == null) ? null : this.requiredList.iterator();
  }

  public void addToRequiredList(String elem) {
    if (this.requiredList == null) {
      this.requiredList = new ArrayList<String>();
    }
    this.requiredList.add(elem);
  }

  public List<String> getRequiredList() {
    return this.requiredList;
  }

  public Foo setRequiredList(List<String> requiredList) {
    this.requiredList = requiredList;
    return this;
  }

  public void unsetRequiredList() {
    this.requiredList = null;
  }

  /** Returns true if field requiredList is set (has been assigned a value) and false otherwise */
  public boolean isSetRequiredList() {
    return this.requiredList != null;
  }

  public void setRequiredListIsSet(boolean value) {
    if (!value) {
      this.requiredList = null;
    }
  }

  public int getRequiredSetSize() {
    return (this.requiredSet == null) ? 0 : this.requiredSet.size();
  }

  public java.util.Iterator<String> getRequiredSetIterator() {
    return (this.requiredSet == null) ? null : this.requiredSet.iterator();
  }

  public void addToRequiredSet(String elem) {
    if (this.requiredSet == null) {
      this.requiredSet = new HashSet<String>();
    }
    this.requiredSet.add(elem);
  }

  public Set<String> getRequiredSet() {
    return this.requiredSet;
  }

  public Foo setRequiredSet(Set<String> requiredSet) {
    this.requiredSet = requiredSet;
    return this;
  }

  public void unsetRequiredSet() {
    this.requiredSet = null;
  }

  /** Returns true if field requiredSet is set (has been assigned a value) and false otherwise */
  public boolean isSetRequiredSet() {
    return this.requiredSet != null;
  }

  public void setRequiredSetIsSet(boolean value) {
    if (!value) {
      this.requiredSet = null;
    }
  }

  public int getRequiredMapSize() {
    return (this.requiredMap == null) ? 0 : this.requiredMap.size();
  }

  public void putToRequiredMap(String key, String val) {
    if (this.requiredMap == null) {
      this.requiredMap = new HashMap<String,String>();
    }
    this.requiredMap.put(key, val);
  }

  public Map<String,String> getRequiredMap() {
    return this.requiredMap;
  }

  public Foo setRequiredMap(Map<String,String> requiredMap) {
    this.requiredMap = requiredMap;
    return this;
  }

  public void unsetRequiredMap() {
    this.requiredMap = null;
  }

  /** Returns true if field requiredMap is set (has been assigned a value) and false otherwise */
  public boolean isSetRequiredMap() {
    return this.requiredMap != null;
  }

  public void setRequiredMapIsSet(boolean value) {
    if (!value) {
      this.requiredMap = null;
    }
  }

  public int getOptionalListSize() {
    return (this.optionalList == null) ? 0 : this.optionalList.size();
  }

  public java.util.Iterator<String> getOptionalListIterator() {
    return (this.optionalList == null) ? null : this.optionalList.iterator();
  }

  public void addToOptionalList(String elem) {
    if (this.optionalList == null) {
      this.optionalList = new ArrayList<String>();
    }
    this.optionalList.add(elem);
  }

  public List<String> getOptionalList() {
    return this.optionalList;
  }

  public Foo setOptionalList(List<String> optionalList) {
    this.optionalList = optionalList;
    return this;
  }

  public void unsetOptionalList() {
    this.optionalList = null;
  }

  /** Returns true if field optionalList is set (has been assigned a value) and false otherwise */
  public boolean isSetOptionalList() {
    return this.optionalList != null;
  }

  public void setOptionalListIsSet(boolean value) {
    if (!value) {
      this.optionalList = null;
    }
  }

  public int getOptionalSetSize() {
    return (this.optionalSet == null) ? 0 : this.optionalSet.size();
  }

  public java.util.Iterator<String> getOptionalSetIterator() {
    return (this.optionalSet == null) ? null : this.optionalSet.iterator();
  }

  public void addToOptionalSet(String elem) {
    if (this.optionalSet == null) {
      this.optionalSet = new HashSet<String>();
    }
    this.optionalSet.add(elem);
  }

  public Set<String> getOptionalSet() {
    return this.optionalSet;
  }

  public Foo setOptionalSet(Set<String> optionalSet) {
    this.optionalSet = optionalSet;
    return this;
  }

  public void unsetOptionalSet() {
    this.optionalSet = null;
  }

  /** Returns true if field optionalSet is set (has been assigned a value) and false otherwise */
  public boolean isSetOptionalSet() {
    return this.optionalSet != null;
  }

  public void setOptionalSetIsSet(boolean value) {
    if (!value) {
      this.optionalSet = null;
    }
  }

  public int getOptionalMapSize() {
    return (this.optionalMap == null) ? 0 : this.optionalMap.size();
  }

  public void putToOptionalMap(String key, String val) {
    if (this.optionalMap == null) {
      this.optionalMap = new HashMap<String,String>();
    }
    this.optionalMap.put(key, val);
  }

  public Map<String,String> getOptionalMap() {
    return this.optionalMap;
  }

  public Foo setOptionalMap(Map<String,String> optionalMap) {
    this.optionalMap = optionalMap;
    return this;
  }

  public void unsetOptionalMap() {
    this.optionalMap = null;
  }

  /** Returns true if field optionalMap is set (has been assigned a value) and false otherwise */
  public boolean isSetOptionalMap() {
    return this.optionalMap != null;
  }

  public void setOptionalMapIsSet(boolean value) {
    if (!value) {
      this.optionalMap = null;
    }
  }

  public Bar getBar() {
    return this.bar;
  }

  public Foo setBar(Bar bar) {
    this.bar = bar;
    return this;
  }

  public void unsetBar() {
    this.bar = null;
  }

  /** Returns true if field bar is set (has been assigned a value) and false otherwise */
  public boolean isSetBar() {
    return this.bar != null;
  }

  public void setBarIsSet(boolean value) {
    if (!value) {
      this.bar = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case REQUIRED_LIST:
      if (value == null) {
        unsetRequiredList();
      } else {
        setRequiredList((List<String>)value);
      }
      break;

    case REQUIRED_SET:
      if (value == null) {
        unsetRequiredSet();
      } else {
        setRequiredSet((Set<String>)value);
      }
      break;

    case REQUIRED_MAP:
      if (value == null) {
        unsetRequiredMap();
      } else {
        setRequiredMap((Map<String,String>)value);
      }
      break;

    case OPTIONAL_LIST:
      if (value == null) {
        unsetOptionalList();
      } else {
        setOptionalList((List<String>)value);
      }
      break;

    case OPTIONAL_SET:
      if (value == null) {
        unsetOptionalSet();
      } else {
        setOptionalSet((Set<String>)value);
      }
      break;

    case OPTIONAL_MAP:
      if (value == null) {
        unsetOptionalMap();
      } else {
        setOptionalMap((Map<String,String>)value);
      }
      break;

    case BAR:
      if (value == null) {
        unsetBar();
      } else {
        setBar((Bar)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case REQUIRED_LIST:
      return getRequiredList();

    case REQUIRED_SET:
      return getRequiredSet();

    case REQUIRED_MAP:
      return getRequiredMap();

    case OPTIONAL_LIST:
      return getOptionalList();

    case OPTIONAL_SET:
      return getOptionalSet();

    case OPTIONAL_MAP:
      return getOptionalMap();

    case BAR:
      return getBar();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case REQUIRED_LIST:
      return isSetRequiredList();
    case REQUIRED_SET:
      return isSetRequiredSet();
    case REQUIRED_MAP:
      return isSetRequiredMap();
    case OPTIONAL_LIST:
      return isSetOptionalList();
    case OPTIONAL_SET:
      return isSetOptionalSet();
    case OPTIONAL_MAP:
      return isSetOptionalMap();
    case BAR:
      return isSetBar();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Foo)
      return this.equals((Foo)that);
    return false;
  }

  public boolean equals(Foo that) {
    if (that == null)
      return false;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_requiredList = true && this.isSetRequiredList();
    boolean that_present_requiredList = true && that.isSetRequiredList();
    if (this_present_requiredList || that_present_requiredList) {
      if (!(this_present_requiredList && that_present_requiredList))
        return false;
      if (!this.requiredList.equals(that.requiredList))
        return false;
    }

    boolean this_present_requiredSet = true && this.isSetRequiredSet();
    boolean that_present_requiredSet = true && that.isSetRequiredSet();
    if (this_present_requiredSet || that_present_requiredSet) {
      if (!(this_present_requiredSet && that_present_requiredSet))
        return false;
      if (!this.requiredSet.equals(that.requiredSet))
        return false;
    }

    boolean this_present_requiredMap = true && this.isSetRequiredMap();
    boolean that_present_requiredMap = true && that.isSetRequiredMap();
    if (this_present_requiredMap || that_present_requiredMap) {
      if (!(this_present_requiredMap && that_present_requiredMap))
        return false;
      if (!this.requiredMap.equals(that.requiredMap))
        return false;
    }

    boolean this_present_optionalList = true && this.isSetOptionalList();
    boolean that_present_optionalList = true && that.isSetOptionalList();
    if (this_present_optionalList || that_present_optionalList) {
      if (!(this_present_optionalList && that_present_optionalList))
        return false;
      if (!this.optionalList.equals(that.optionalList))
        return false;
    }

    boolean this_present_optionalSet = true && this.isSetOptionalSet();
    boolean that_present_optionalSet = true && that.isSetOptionalSet();
    if (this_present_optionalSet || that_present_optionalSet) {
      if (!(this_present_optionalSet && that_present_optionalSet))
        return false;
      if (!this.optionalSet.equals(that.optionalSet))
        return false;
    }

    boolean this_present_optionalMap = true && this.isSetOptionalMap();
    boolean that_present_optionalMap = true && that.isSetOptionalMap();
    if (this_present_optionalMap || that_present_optionalMap) {
      if (!(this_present_optionalMap && that_present_optionalMap))
        return false;
      if (!this.optionalMap.equals(that.optionalMap))
        return false;
    }

    boolean this_present_bar = true && this.isSetBar();
    boolean that_present_bar = true && that.isSetBar();
    if (this_present_bar || that_present_bar) {
      if (!(this_present_bar && that_present_bar))
        return false;
      if (!this.bar.equals(that.bar))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Foo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Foo typedOther = (Foo)other;

    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequiredList()).compareTo(typedOther.isSetRequiredList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequiredList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requiredList, typedOther.requiredList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequiredSet()).compareTo(typedOther.isSetRequiredSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequiredSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requiredSet, typedOther.requiredSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequiredMap()).compareTo(typedOther.isSetRequiredMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequiredMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requiredMap, typedOther.requiredMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOptionalList()).compareTo(typedOther.isSetOptionalList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOptionalList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.optionalList, typedOther.optionalList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOptionalSet()).compareTo(typedOther.isSetOptionalSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOptionalSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.optionalSet, typedOther.optionalSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOptionalMap()).compareTo(typedOther.isSetOptionalMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOptionalMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.optionalMap, typedOther.optionalMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBar()).compareTo(typedOther.isSetBar());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBar()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bar, typedOther.bar);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Foo(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("requiredList:");
    if (this.requiredList == null) {
      sb.append("null");
    } else {
      sb.append(this.requiredList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("requiredSet:");
    if (this.requiredSet == null) {
      sb.append("null");
    } else {
      sb.append(this.requiredSet);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("requiredMap:");
    if (this.requiredMap == null) {
      sb.append("null");
    } else {
      sb.append(this.requiredMap);
    }
    first = false;
    if (isSetOptionalList()) {
      if (!first) sb.append(", ");
      sb.append("optionalList:");
      if (this.optionalList == null) {
        sb.append("null");
      } else {
        sb.append(this.optionalList);
      }
      first = false;
    }
    if (isSetOptionalSet()) {
      if (!first) sb.append(", ");
      sb.append("optionalSet:");
      if (this.optionalSet == null) {
        sb.append("null");
      } else {
        sb.append(this.optionalSet);
      }
      first = false;
    }
    if (isSetOptionalMap()) {
      if (!first) sb.append(", ");
      sb.append("optionalMap:");
      if (this.optionalMap == null) {
        sb.append("null");
      } else {
        sb.append(this.optionalMap);
      }
      first = false;
    }
    if (isSetBar()) {
      if (!first) sb.append(", ");
      sb.append("bar:");
      if (this.bar == null) {
        sb.append("null");
      } else {
        sb.append(this.bar);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
    }
    if (requiredList == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'requiredList' was not present! Struct: " + toString());
    }
    if (requiredSet == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'requiredSet' was not present! Struct: " + toString());
    }
    if (requiredMap == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'requiredMap' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (bar != null) {
      bar.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FooStandardSchemeFactory implements SchemeFactory {
    public FooStandardScheme getScheme() {
      return new FooStandardScheme();
    }
  }

  private static class FooStandardScheme extends StandardScheme<Foo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Foo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REQUIRED_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list52 = iprot.readListBegin();
                struct.requiredList = new ArrayList<String>(_list52.size);
                for (int _i53 = 0; _i53 < _list52.size; ++_i53)
                {
                  String _elem54; // optional
                  _elem54 = iprot.readString();
                  struct.requiredList.add(_elem54);
                }
                iprot.readListEnd();
              }
              struct.setRequiredListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REQUIRED_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set55 = iprot.readSetBegin();
                struct.requiredSet = new HashSet<String>(2*_set55.size);
                for (int _i56 = 0; _i56 < _set55.size; ++_i56)
                {
                  String _elem57; // optional
                  _elem57 = iprot.readString();
                  struct.requiredSet.add(_elem57);
                }
                iprot.readSetEnd();
              }
              struct.setRequiredSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REQUIRED_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map58 = iprot.readMapBegin();
                struct.requiredMap = new HashMap<String,String>(2*_map58.size);
                for (int _i59 = 0; _i59 < _map58.size; ++_i59)
                {
                  String _key60; // required
                  String _val61; // required
                  _key60 = iprot.readString();
                  _val61 = iprot.readString();
                  struct.requiredMap.put(_key60, _val61);
                }
                iprot.readMapEnd();
              }
              struct.setRequiredMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // OPTIONAL_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list62 = iprot.readListBegin();
                struct.optionalList = new ArrayList<String>(_list62.size);
                for (int _i63 = 0; _i63 < _list62.size; ++_i63)
                {
                  String _elem64; // optional
                  _elem64 = iprot.readString();
                  struct.optionalList.add(_elem64);
                }
                iprot.readListEnd();
              }
              struct.setOptionalListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // OPTIONAL_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set65 = iprot.readSetBegin();
                struct.optionalSet = new HashSet<String>(2*_set65.size);
                for (int _i66 = 0; _i66 < _set65.size; ++_i66)
                {
                  String _elem67; // optional
                  _elem67 = iprot.readString();
                  struct.optionalSet.add(_elem67);
                }
                iprot.readSetEnd();
              }
              struct.setOptionalSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // OPTIONAL_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map68 = iprot.readMapBegin();
                struct.optionalMap = new HashMap<String,String>(2*_map68.size);
                for (int _i69 = 0; _i69 < _map68.size; ++_i69)
                {
                  String _key70; // required
                  String _val71; // required
                  _key70 = iprot.readString();
                  _val71 = iprot.readString();
                  struct.optionalMap.put(_key70, _val71);
                }
                iprot.readMapEnd();
              }
              struct.setOptionalMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // BAR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.bar = new Bar();
              struct.bar.read(iprot);
              struct.setBarIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Foo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.requiredList != null) {
        oprot.writeFieldBegin(REQUIRED_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.requiredList.size()));
          for (String _iter72 : struct.requiredList)
          {
            oprot.writeString(_iter72);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.requiredSet != null) {
        oprot.writeFieldBegin(REQUIRED_SET_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.requiredSet.size()));
          for (String _iter73 : struct.requiredSet)
          {
            oprot.writeString(_iter73);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.requiredMap != null) {
        oprot.writeFieldBegin(REQUIRED_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.requiredMap.size()));
          for (Map.Entry<String, String> _iter74 : struct.requiredMap.entrySet())
          {
            oprot.writeString(_iter74.getKey());
            oprot.writeString(_iter74.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.optionalList != null) {
        if (struct.isSetOptionalList()) {
          oprot.writeFieldBegin(OPTIONAL_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.optionalList.size()));
            for (String _iter75 : struct.optionalList)
            {
              oprot.writeString(_iter75);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.optionalSet != null) {
        if (struct.isSetOptionalSet()) {
          oprot.writeFieldBegin(OPTIONAL_SET_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.optionalSet.size()));
            for (String _iter76 : struct.optionalSet)
            {
              oprot.writeString(_iter76);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.optionalMap != null) {
        if (struct.isSetOptionalMap()) {
          oprot.writeFieldBegin(OPTIONAL_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.optionalMap.size()));
            for (Map.Entry<String, String> _iter77 : struct.optionalMap.entrySet())
            {
              oprot.writeString(_iter77.getKey());
              oprot.writeString(_iter77.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.bar != null) {
        if (struct.isSetBar()) {
          oprot.writeFieldBegin(BAR_FIELD_DESC);
          struct.bar.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FooTupleSchemeFactory implements SchemeFactory {
    public FooTupleScheme getScheme() {
      return new FooTupleScheme();
    }
  }

  private static class FooTupleScheme extends TupleScheme<Foo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Foo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.name);
      {
        oprot.writeI32(struct.requiredList.size());
        for (String _iter78 : struct.requiredList)
        {
          oprot.writeString(_iter78);
        }
      }
      {
        oprot.writeI32(struct.requiredSet.size());
        for (String _iter79 : struct.requiredSet)
        {
          oprot.writeString(_iter79);
        }
      }
      {
        oprot.writeI32(struct.requiredMap.size());
        for (Map.Entry<String, String> _iter80 : struct.requiredMap.entrySet())
        {
          oprot.writeString(_iter80.getKey());
          oprot.writeString(_iter80.getValue());
        }
      }
      BitSet optionals = new BitSet();
      if (struct.isSetOptionalList()) {
        optionals.set(0);
      }
      if (struct.isSetOptionalSet()) {
        optionals.set(1);
      }
      if (struct.isSetOptionalMap()) {
        optionals.set(2);
      }
      if (struct.isSetBar()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetOptionalList()) {
        {
          oprot.writeI32(struct.optionalList.size());
          for (String _iter81 : struct.optionalList)
          {
            oprot.writeString(_iter81);
          }
        }
      }
      if (struct.isSetOptionalSet()) {
        {
          oprot.writeI32(struct.optionalSet.size());
          for (String _iter82 : struct.optionalSet)
          {
            oprot.writeString(_iter82);
          }
        }
      }
      if (struct.isSetOptionalMap()) {
        {
          oprot.writeI32(struct.optionalMap.size());
          for (Map.Entry<String, String> _iter83 : struct.optionalMap.entrySet())
          {
            oprot.writeString(_iter83.getKey());
            oprot.writeString(_iter83.getValue());
          }
        }
      }
      if (struct.isSetBar()) {
        struct.bar.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Foo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.name = iprot.readString();
      struct.setNameIsSet(true);
      {
        org.apache.thrift.protocol.TList _list84 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.requiredList = new ArrayList<String>(_list84.size);
        for (int _i85 = 0; _i85 < _list84.size; ++_i85)
        {
          String _elem86; // optional
          _elem86 = iprot.readString();
          struct.requiredList.add(_elem86);
        }
      }
      struct.setRequiredListIsSet(true);
      {
        org.apache.thrift.protocol.TSet _set87 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.requiredSet = new HashSet<String>(2*_set87.size);
        for (int _i88 = 0; _i88 < _set87.size; ++_i88)
        {
          String _elem89; // optional
          _elem89 = iprot.readString();
          struct.requiredSet.add(_elem89);
        }
      }
      struct.setRequiredSetIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map90 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.requiredMap = new HashMap<String,String>(2*_map90.size);
        for (int _i91 = 0; _i91 < _map90.size; ++_i91)
        {
          String _key92; // required
          String _val93; // required
          _key92 = iprot.readString();
          _val93 = iprot.readString();
          struct.requiredMap.put(_key92, _val93);
        }
      }
      struct.setRequiredMapIsSet(true);
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list94 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.optionalList = new ArrayList<String>(_list94.size);
          for (int _i95 = 0; _i95 < _list94.size; ++_i95)
          {
            String _elem96; // optional
            _elem96 = iprot.readString();
            struct.optionalList.add(_elem96);
          }
        }
        struct.setOptionalListIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TSet _set97 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.optionalSet = new HashSet<String>(2*_set97.size);
          for (int _i98 = 0; _i98 < _set97.size; ++_i98)
          {
            String _elem99; // optional
            _elem99 = iprot.readString();
            struct.optionalSet.add(_elem99);
          }
        }
        struct.setOptionalSetIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map100 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.optionalMap = new HashMap<String,String>(2*_map100.size);
          for (int _i101 = 0; _i101 < _map100.size; ++_i101)
          {
            String _key102; // required
            String _val103; // required
            _key102 = iprot.readString();
            _val103 = iprot.readString();
            struct.optionalMap.put(_key102, _val103);
          }
        }
        struct.setOptionalMapIsSet(true);
      }
      if (incoming.get(3)) {
        struct.bar = new Bar();
        struct.bar.read(iprot);
        struct.setBarIsSet(true);
      }
    }
  }

}

